{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","containers/Checkout/ContactData/ContactData.module.scss","components/Order/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","push","Invalid","includes","pop","elementType","elementConfig","value","className","join","onChange","changed","options","map","option","displayName","module","exports","connect","state","ingr","burgerBuilder","ingredients","price","loading","order","confirmed","orderConfirmed","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","React","useState","name","type","placeholder","validation","required","valid","touched","phone","isTel","email","isMail","street","house","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElements","key","id","config","form","styles","ContactData","onSubmit","event","preventDefault","formData","inputIdx","el","idx","updatedOrderForm","updatedFormElement","target","checkValidity","changeFormValueHandler","Button","btnType","disabled","Spinner","orderRedirect","to","axios","CheckoutSummary","Burger","clicked","checkoutCanceled","checkoutContinued","summary","history","replace","goBack","path","match","component"],"mappings":"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","file":"static/js/3.ea43d22d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport classes from \"./Input.module.scss\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  let inputClasses = [classes.InputElement];\r\n  if (props.invalid) {inputClasses.push(classes.Invalid)} else if (inputClasses.includes(classes.Invalid) ) {\r\n    inputClasses.pop(classes.Invalid) \r\n  };\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"text-area\":\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n  return <>{ inputElement }</>;\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputElement\":\"Input_InputElement__1srPc\",\"Invalid\":\"Input_Invalid__N4bnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1nPzo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__9Rkiw\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport styles from \"./ContactData.module.scss\";\r\nimport { Button } from \"../../../components/UI/Button/Button\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport * as actions from \"../../../store/actions/order\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport {checkValidity} from '../../../shared/utility';\r\n\r\nconst ContactData = (props) => {\r\n  const [orderForm, setOrderForm] = React.useState({\r\n    name: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Name\",\r\n      },\r\n      value: \"\",\r\n      validation: { required: true },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    phone: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"tel\",\r\n        placeholder: \"Your Phone Number\",\r\n      },\r\n      value: \"\",\r\n      validation: { required: true, isTel: true },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Your E-mail\",\r\n      },\r\n      value: \"\",\r\n      validation: { required: true, isMail: true },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Street\",\r\n      },\r\n      value: \"\",\r\n      validation: { required: true },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    house: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your House\",\r\n      },\r\n      value: \"\",\r\n      validation: { required: true },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      elementType: \"select\",\r\n      elementConfig: {\r\n        options: [\r\n          { value: \"fastest\", displayName: \"Fastest\" },\r\n          { value: \"cheapest\", displayName: \"Cheapest\" },\r\n        ],\r\n      },\r\n      value: \"fastest\",\r\n      valid: true,\r\n      validation: {},\r\n    },\r\n  });\r\n\r\n  const [formIsValid, setFormIsValid] = React.useState(false);\r\n  \r\n  const changeFormValueHandler = (event, idx) => {\r\n    const updatedOrderForm = { ...orderForm};\r\n    const updatedFormElement = { ...updatedOrderForm[idx] };\r\n    updatedFormElement.value = event.target.value;\r\n    updatedFormElement.touched = true;\r\n    updatedFormElement.valid = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedOrderForm[idx] = updatedFormElement;\r\n\r\n    let formIsValid = true;\r\n\r\n    for (let inputIdx in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdx].valid && formIsValid;\r\n    }\r\n\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(formIsValid);\r\n  };\r\n\r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let inputIdx in orderForm) {\r\n      formData[inputIdx] = orderForm[inputIdx].value;\r\n    }\r\n    const order = {\r\n      ingredients: props.ingr,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n\r\n    props.onOrderBurger(order, props.token);\r\n  };\r\n\r\n  const formElements = [];\r\n  for (let key in orderForm) {\r\n    formElements.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n  let form = (\r\n    <form className={styles.ContactData} onSubmit={orderHandler}>\r\n      <h4>Enter your contact data, please.</h4>\r\n      {formElements.map((el) => (\r\n        <Input\r\n          key={el.id}\r\n          elementConfig={el.config.elementConfig}\r\n          elementType={el.config.elementType}\r\n          value={el.config.value}\r\n          changed={(event) => changeFormValueHandler(event, el.id)}\r\n          invalid={\r\n            el.config.validation && !el.config.valid && el.config.touched\r\n          }\r\n        />\r\n      ))}\r\n      <Button btnType=\"Success\" disabled={!formIsValid}>\r\n        CONFIRM\r\n      </Button>\r\n    </form>\r\n  );\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n  const orderRedirect = props.confirmed ? <Redirect to=\"/\" /> : null;\r\n\r\n  return (\r\n    <>\r\n      {orderRedirect}\r\n      {form}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingr: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.price,\r\n    loading: state.order.loading,\r\n    confirmed: state.order.orderConfirmed,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.burgerOrder(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from \"react\";\r\n\r\nimport { Burger } from \"../../Burger/Burger\";\r\nimport { Button } from \"../../UI/Button/Button\";\r\nimport styles from \"./CheckoutSummary.module.scss\";\r\n\r\nconst CheckoutSummary = (props) => {\r\n  return (\r\n    <div className={styles.CheckoutSummary}>\r\n      <h1>We hope it tastes perfect!</h1>\r\n      <Burger ingredients={props.ingredients} />\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCanceled}>\r\n        Cancel\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutSummary;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\n\r\nconst Checkout = (props) => {\r\n  const checkoutCanceledHandler = () => {\r\n    props.history.goBack();\r\n  };\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  let summary = <Redirect to=\"/\" />;\r\n  if (props.ingr) {\r\n    const orderRedirect = props.confirmed ? <Redirect to=\"/\" /> : null;\r\n    summary = (\r\n      <>\r\n        {orderRedirect}\r\n        <CheckoutSummary\r\n          ingredients={props.ingr}\r\n          checkoutContinued={checkoutContinuedHandler}\r\n          checkoutCanceled={checkoutCanceledHandler}\r\n        />\r\n        <Route\r\n          path={props.match.path + \"/contact-data\"}\r\n          component={ContactData}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  return summary;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingr: state.burgerBuilder.ingredients,\r\n    confirmed: state.order.orderConfirmed,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}