{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","containers/Auth/Auth.module.scss","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","push","Invalid","includes","pop","elementType","elementConfig","value","className","join","onChange","changed","options","map","option","displayName","module","exports","Auth","changeFormValueHandler","event","contorolName","updatedAuthForm","state","authForm","target","valid","checkValidity","validation","touched","setState","formOnSubmit","preventDefault","onAuth","email","password","isSignUp","signinSignupHandler","prevState","type","placeholder","required","isMail","minLength","rules","isValid","trim","test","isTel","length","formElements","key","this","id","config","form","loading","el","errorMessage","error","style","color","message","split","redirect","isAuth","ingr","Object","values","reduce","sum","to","onSubmit","LoginData","btnType","clicked","Component","connect","auth","burgerBuilder","ingredients","token","dispatch","actions"],"mappings":"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","file":"static/js/4.4018ffe3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport classes from \"./Input.module.scss\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  let inputClasses = [classes.InputElement];\r\n  if (props.invalid) {inputClasses.push(classes.Invalid)} else if (inputClasses.includes(classes.Invalid) ) {\r\n    inputClasses.pop(classes.Invalid) \r\n  };\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"text-area\":\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n  return <>{ inputElement }</>;\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputElement\":\"Input_InputElement__1srPc\",\"Invalid\":\"Input_Invalid__N4bnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginData\":\"Auth_LoginData__1Ee2O\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport { Button } from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.module.scss\";\r\nimport * as actions from \"../../store/actions/auth\";\r\n\r\nclass Auth extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      authForm: {\r\n        email: {\r\n          elementType: \"input\",\r\n          elementConfig: {\r\n            type: \"email\",\r\n            placeholder: \"E-mail\",\r\n          },\r\n          value: \"\",\r\n          validation: { required: true, isMail: true },\r\n          valid: false,\r\n          touched: false,\r\n        },\r\n        password: {\r\n          elementType: \"input\",\r\n          elementConfig: {\r\n            type: \"password\",\r\n            placeholder: \"Password\",\r\n          },\r\n          value: \"\",\r\n          validation: { required: true, minLength: 6 },\r\n          valid: false,\r\n          touched: false,\r\n        },\r\n      },\r\n      isSignUp: true,\r\n    };\r\n  }\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if (rules.isMail) {\r\n      const pattern = /^[\\w]{1}[\\w-.]*@[\\w-]+\\.[a-z]{2,4}$/i;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n    if (rules.isTel) {\r\n      const pattern = /^[\\d+][\\d()-]{7,19}\\d$/;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  changeFormValueHandler = (event, contorolName) => {\r\n    const updatedAuthForm = {\r\n      ...this.state.authForm,\r\n      [contorolName]: {\r\n        ...this.state.authForm[contorolName],\r\n        value: event.target.value,\r\n        valid: this.checkValidity(\r\n          event.target.value,\r\n          this.state.authForm[contorolName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    this.setState({ authForm: updatedAuthForm });\r\n  };\r\n\r\n  formOnSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.authForm.email.value,\r\n      this.state.authForm.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  signinSignupHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState((prevState) => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElements = [];\r\n    for (let key in this.state.authForm) {\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.authForm[key],\r\n      });\r\n    }\r\n    let form = <Spinner />;\r\n    if (!this.props.loading) {\r\n      form = formElements.map((el) => (\r\n        <Input\r\n          key={el.id}\r\n          elementConfig={el.config.elementConfig}\r\n          elementType={el.config.elementType}\r\n          value={el.config.value}\r\n          changed={(event) => this.changeFormValueHandler(event, el.id)}\r\n          invalid={\r\n            el.config.validation && !el.config.valid && el.config.touched\r\n          }\r\n        />\r\n      ));\r\n    }\r\n    let errorMessage = this.props.error ? (\r\n      <p style={{ color: \"red\" }}>\r\n        {this.props.error.message.split(\"_\").join(\" \") + \"!\"}\r\n      </p>\r\n    ) : null;\r\n\r\n    let redirect = null;\r\n    if (this.props.isAuth && this.props.ingr) {\r\n      let ingredientsTouched = Object.values(this.props.ingr).reduce(\r\n        (sum, el) => {\r\n          return sum + el;\r\n        },\r\n        0\r\n      );\r\n      redirect =\r\n        ingredientsTouched > 0 ? (\r\n          <Redirect to=\"/checkout\" />\r\n        ) : (\r\n          <Redirect to=\"/\" />\r\n        );\r\n    }\r\n    return (\r\n      <>\r\n        {redirect}\r\n        <form onSubmit={this.formOnSubmit} className={classes.LoginData}>\r\n          <p>Please, login.</p>\r\n          {errorMessage}\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n          <Button clicked={this.signinSignupHandler} btnType=\"Danger\">\r\n            SWITCH TO {!this.state.isSignUp ? \"SIGNIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    ingr: state.burgerBuilder.ingredients,\r\n    isAuth: state.auth.token !== null,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}