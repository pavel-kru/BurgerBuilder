{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","containers/Checkout/ContactData/ContactData.module.scss","components/Order/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","push","Invalid","includes","pop","elementType","elementConfig","value","className","join","onChange","changed","options","map","option","displayName","module","exports","ContactData","orderHandler","event","preventDefault","formData","inputIdx","state","orderForm","order","ingredients","ingr","price","orderData","userId","onOrderBurger","token","name","type","placeholder","validation","required","valid","touched","phone","isTel","email","isMail","street","house","deliveryMethod","formIsValid","rules","isValid","trim","test","idx","updatedOrderForm","this","updatedFormElement","target","checkValidity","setState","formElements","key","id","config","form","styles","onSubmit","el","changeFormValueHandler","Button","btnType","disabled","loading","Spinner","orderRedirect","confirmed","to","Component","connect","burgerBuilder","orderConfirmed","auth","dispatch","actions","withErrorHandler","axios","CheckoutSummary","Burger","clicked","checkoutCanceled","checkoutContinued","Checkout","checkoutCanceledHandler","history","goBack","checkoutContinuedHandler","replace","summary","path","match","component"],"mappings":"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","file":"static/js/3.a7079aff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport classes from \"./Input.module.scss\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  let inputClasses = [classes.InputElement];\r\n  if (props.invalid) {inputClasses.push(classes.Invalid)} else if (inputClasses.includes(classes.Invalid) ) {\r\n    inputClasses.pop(classes.Invalid) \r\n  };\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"text-area\":\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n  return <>{ inputElement }</>;\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputElement\":\"Input_InputElement__1srPc\",\"Invalid\":\"Input_Invalid__N4bnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1nPzo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__9Rkiw\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport styles from \"./ContactData.module.scss\";\r\nimport { Button } from \"../../../components/UI/Button/Button\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport * as actions from \"../../../store/actions/order\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\n\r\nclass ContactData extends Component {\r\n constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      orderForm: {\r\n        name: {\r\n          elementType: \"input\",\r\n          elementConfig: {\r\n            type: \"text\",\r\n            placeholder: \"Your Name\",\r\n          },\r\n          value: \"\",\r\n          validation: { required: true },\r\n          valid: false,\r\n          touched: false,\r\n        },\r\n        phone: {\r\n          elementType: \"input\",\r\n          elementConfig: {\r\n            type: \"tel\",\r\n            placeholder: \"Your Phone Number\",\r\n          },\r\n          value: \"\",\r\n          validation: { required: true, isTel: true },\r\n          valid: false,\r\n          touched: false,\r\n        },\r\n        email: {\r\n          elementType: \"input\",\r\n          elementConfig: {\r\n            type: \"email\",\r\n            placeholder: \"Your E-mail\",\r\n          },\r\n          value: \"\",\r\n          validation: { required: true, isMail: true },\r\n          valid: false,\r\n          touched: false,\r\n        },\r\n        street: {\r\n          elementType: \"input\",\r\n          elementConfig: {\r\n            type: \"text\",\r\n            placeholder: \"Your Street\",\r\n          },\r\n          value: \"\",\r\n          validation: { required: true },\r\n          valid: false,\r\n          touched: false,\r\n        },\r\n        house: {\r\n          elementType: \"input\",\r\n          elementConfig: {\r\n            type: \"text\",\r\n            placeholder: \"Your House\",\r\n          },\r\n          value: \"\",\r\n          validation: { required: true },\r\n          valid: false,\r\n          touched: false,\r\n        },\r\n        deliveryMethod: {\r\n          elementType: \"select\",\r\n          elementConfig: {\r\n            options: [\r\n              { value: \"fastest\", displayName: \"Fastest\" },\r\n              { value: \"cheapest\", displayName: \"Cheapest\" },\r\n            ],\r\n          },\r\n          value: \"fastest\",\r\n          valid: true,\r\n          validation: {},\r\n        },\r\n      },\r\n      formIsValid: false,\r\n    };\r\n  }\r\n  \r\n\r\n    checkValidity(value, rules) {\r\n      let isValid = true;\r\n      if (rules.required) {\r\n        isValid = value.trim() !== \"\" && isValid;\r\n      }\r\n      if (rules.isMail) {\r\n        const pattern = /^[\\w]{1}[\\w-.]*@[\\w-]+\\.[a-z]{2,4}$/i;\r\n        isValid = pattern.test(value) && isValid;\r\n      }\r\n      if (rules.isTel) {\r\n        const pattern = /^[\\d+][\\d()-]{7,19}\\d$/;\r\n        isValid = pattern.test(value) && isValid;\r\n      }\r\n      return isValid;\r\n    }\r\n\r\n  changeFormValueHandler(event, idx) {\r\n    const updatedOrderForm = { ...this.state.orderForm };\r\n    const updatedFormElement = { ...updatedOrderForm[idx] };\r\n    updatedFormElement.value = event.target.value;\r\n    updatedFormElement.touched = true;\r\n    updatedFormElement.valid = this.checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedOrderForm[idx] = updatedFormElement;\r\n\r\n    let formIsValid = true;\r\n\r\n    for (let inputIdx in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdx].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  }\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let inputIdx in this.state.orderForm) {\r\n      formData[inputIdx] = this.state.orderForm[inputIdx].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ingr,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  render() {\r\n    const formElements = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form className={styles.ContactData} onSubmit={this.orderHandler}>\r\n        <h4>Enter your contact data, please.</h4>\r\n        {formElements.map((el) => (\r\n          <Input\r\n            key={el.id}\r\n            elementConfig={el.config.elementConfig}\r\n            elementType={el.config.elementType}\r\n            value={el.config.value}\r\n            changed={(event) => this.changeFormValueHandler(event, el.id)}\r\n            invalid={\r\n              el.config.validation && !el.config.valid && el.config.touched\r\n            }\r\n          />\r\n        ))}\r\n        <Button\r\n          btnType=\"Success\"\r\n          disabled={!this.state.formIsValid}\r\n          // clicked={this.props.onOrderConfirm}\r\n        >\r\n          CONFIRM\r\n        </Button>\r\n      </form>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    const orderRedirect = this.props.confirmed ? <Redirect to=\"/\" /> : null;\r\n\r\n    return (\r\n      <>\r\n        {orderRedirect}\r\n        {form}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingr: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.price,\r\n    loading: state.order.loading,\r\n    confirmed: state.order.orderConfirmed,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => dispatch(actions.burgerOrder(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from \"react\";\r\n\r\nimport { Burger } from \"../../Burger/Burger\";\r\nimport { Button } from \"../../UI/Button/Button\";\r\nimport styles from \"./CheckoutSummary.module.scss\";\r\n\r\nconst CheckoutSummary = (props) => {\r\n  return (\r\n    <div className={styles.CheckoutSummary}>\r\n      <h1>We hope it tastes perfect!</h1>\r\n      <Burger ingredients={props.ingredients} />\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCanceled}>\r\n        Cancel\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\n\r\nclass Checkout extends Component {\r\n \r\n  checkoutCanceledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ingr) {\r\n      const orderRedirect = this.props.confirmed ? <Redirect to=\"/\" /> : null;\r\n      summary = (\r\n        <>\r\n          {orderRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ingr}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n            checkoutCanceled={this.checkoutCanceledHandler}\r\n          />\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingr: state.burgerBuilder.ingredients,\r\n    confirmed: state.order.orderConfirmed,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}