{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","containers/Auth/Auth.module.scss","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","push","Invalid","includes","pop","elementType","elementConfig","value","className","join","onChange","changed","options","map","option","displayName","module","exports","connect","state","loading","auth","error","ingr","burgerBuilder","ingredients","isAuth","token","dispatch","onAuth","email","password","isSignUp","actions","useState","type","placeholder","validation","required","isMail","valid","touched","minLength","authForm","setAuthForm","setIsSignUp","formElements","key","id","config","form","el","event","contorolName","updatedAuthForm","target","checkValidity","changeFormValueHandler","errorMessage","style","color","message","split","redirect","Object","values","reduce","sum","to","onSubmit","preventDefault","LoginData","btnType","clicked"],"mappings":"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","file":"static/js/4.790cb570.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport classes from \"./Input.module.scss\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  let inputClasses = [classes.InputElement];\r\n  if (props.invalid) {inputClasses.push(classes.Invalid)} else if (inputClasses.includes(classes.Invalid) ) {\r\n    inputClasses.pop(classes.Invalid) \r\n  };\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"text-area\":\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n  return <>{ inputElement }</>;\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputElement\":\"Input_InputElement__1srPc\",\"Invalid\":\"Input_Invalid__N4bnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginData\":\"Auth_LoginData__1Ee2O\"};","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport { Button } from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.module.scss\";\r\nimport * as actions from \"../../store/actions/auth\";\r\nimport {checkValidity} from '../../shared/utility'\r\n\r\nconst Auth = (props) => {\r\n  const [authForm, setAuthForm] = useState({\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"E-mail\",\r\n      },\r\n      value: \"\",\r\n      validation: { required: true, isMail: true },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"password\",\r\n        placeholder: \"Password\",\r\n      },\r\n      value: \"\",\r\n      validation: { required: true, minLength: 6 },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  });\r\n\r\n  const [isSignUp, setIsSignUp] = useState(true);\r\n\r\n    const changeFormValueHandler = (event, contorolName) => {\r\n    const updatedAuthForm = {\r\n      ...authForm,\r\n      [contorolName]: {\r\n        ...authForm[contorolName],\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          authForm[contorolName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    setAuthForm(updatedAuthForm);\r\n  };\r\n\r\n  const formOnSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.onAuth(authForm.email.value, authForm.password.value, isSignUp);\r\n  };\r\n\r\n  const signinSignupHandler = (event) => {\r\n    event.preventDefault();\r\n    setIsSignUp(!isSignUp)\r\n  };\r\n\r\n  const formElements = [];\r\n  for (let key in authForm) {\r\n    formElements.push({\r\n      id: key,\r\n      config: authForm[key],\r\n    });\r\n  }\r\n  let form = <Spinner />;\r\n  if (!props.loading) {\r\n    form = formElements.map((el) => (\r\n      <Input\r\n        key={el.id}\r\n        elementConfig={el.config.elementConfig}\r\n        elementType={el.config.elementType}\r\n        value={el.config.value}\r\n        changed={(event) => changeFormValueHandler(event, el.id)}\r\n        invalid={el.config.validation && !el.config.valid && el.config.touched}\r\n      />\r\n    ));\r\n  }\r\n  let errorMessage = props.error ? (\r\n    <p style={{ color: \"red\" }}>\r\n      {props.error.message.split(\"_\").join(\" \") + \"!\"}\r\n    </p>\r\n  ) : null;\r\n\r\n  let redirect = null;\r\n  if (props.isAuth && props.ingr) {\r\n    let ingredientsTouched = Object.values(props.ingr).reduce((sum, el) => {\r\n      return sum + el;\r\n    }, 0);\r\n    redirect =\r\n      ingredientsTouched > 0 ? (\r\n        <Redirect to=\"/checkout\" />\r\n      ) : (\r\n        <Redirect to=\"/\" />\r\n      );\r\n  }\r\n  return (\r\n    <>\r\n      {redirect}\r\n      <form onSubmit={formOnSubmit} className={classes.LoginData}>\r\n        <p>Please, login.</p>\r\n        {errorMessage}\r\n        {form}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n        <Button clicked={signinSignupHandler} btnType=\"Danger\">\r\n          SWITCH TO {!isSignUp ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    ingr: state.burgerBuilder.ingredients,\r\n    isAuth: state.auth.token !== null,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}