{"ast":null,"code":"import axios from \"../../axios-orders\";\nimport * as actionsTypes from \"./actionsTypes\";\nexport const burgerOrderInit = () => {\n  return {\n    type: actionsTypes.BURGER_ORDER_INIT\n  };\n};\nexport const burgerOrderSuccess = (id, orderData) => {\n  return {\n    type: actionsTypes.BURGER_ORDER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const burgerOrderFail = error => {\n  return {\n    type: actionsTypes.BURGER_ORDER_FAIL,\n    error: error\n  };\n};\nexport const burgerOrderStart = () => {\n  return {\n    type: actionsTypes.BURGER_ORDER_START\n  };\n};\nexport const burgerOrder = (orderData, token) => {\n  return dispatch => {\n    dispatch(burgerOrderStart());\n    axios.post(\"/orders.json?auth=\" + token, orderData).then(response => {\n      console.log(response.data);\n      dispatch(burgerOrderSuccess(response.data.name, orderData));\n    }).catch(error => dispatch(burgerOrderFail(error)));\n  };\n};\nexport const OrdersFetchedSuccess = orders => {\n  return {\n    type: actionsTypes.ORDERS_FETCH_SUCCESS,\n    orders: orders\n  };\n};\n_c = OrdersFetchedSuccess;\nexport const OrdersFetchedFail = error => {\n  return {\n    type: actionsTypes.ORDERS_FETCH_FAIL,\n    error: error\n  };\n};\n_c2 = OrdersFetchedFail;\nexport const ordersFetchStart = () => {\n  return {\n    type: actionsTypes.ORDERS_FETCH_START\n  };\n};\nexport const fetchedOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(ordersFetchStart());\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    axios.get('/orders.json' + queryParams).then(response => {\n      const fetchedOrders = [];\n\n      for (let key in response.data) {\n        fetchedOrders.push({ ...response.data[key],\n          id: key\n        });\n      }\n\n      dispatch(OrdersFetchedSuccess(fetchedOrders));\n    }).catch(error => dispatch(OrdersFetchedFail(error)));\n  };\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OrdersFetchedSuccess\");\n$RefreshReg$(_c2, \"OrdersFetchedFail\");","map":{"version":3,"sources":["C:/Users/User/projects/BurgerBuilder/BurgerBuilder/src/store/actions/order.js"],"names":["axios","actionsTypes","burgerOrderInit","type","BURGER_ORDER_INIT","burgerOrderSuccess","id","orderData","BURGER_ORDER_SUCCESS","orderId","burgerOrderFail","error","BURGER_ORDER_FAIL","burgerOrderStart","BURGER_ORDER_START","burgerOrder","token","dispatch","post","then","response","console","log","data","name","catch","OrdersFetchedSuccess","orders","ORDERS_FETCH_SUCCESS","OrdersFetchedFail","ORDERS_FETCH_FAIL","ordersFetchStart","ORDERS_FETCH_START","fetchedOrders","userId","queryParams","get","key","push"],"mappings":"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","sourcesContent":["import axios from \"../../axios-orders\";\r\nimport * as actionsTypes from \"./actionsTypes\";\r\n\r\nexport const burgerOrderInit = () => {\r\n  return {\r\n    type: actionsTypes.BURGER_ORDER_INIT,\r\n  };\r\n};\r\n\r\nexport const burgerOrderSuccess = (id, orderData) => {\r\n  return {\r\n    type: actionsTypes.BURGER_ORDER_SUCCESS,\r\n    orderId: id,\r\n    orderData: orderData,\r\n  };\r\n};\r\n\r\nexport const burgerOrderFail = (error) => {\r\n  return {\r\n    type: actionsTypes.BURGER_ORDER_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const burgerOrderStart = () => {\r\n  return {\r\n    type: actionsTypes.BURGER_ORDER_START,\r\n  };\r\n};\r\n\r\nexport const burgerOrder = (orderData, token) => {\r\n  return (dispatch) => {\r\n    dispatch(burgerOrderStart());\r\n    axios\r\n      .post(\"/orders.json?auth=\" + token, orderData)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        dispatch(burgerOrderSuccess(response.data.name, orderData));\r\n      })\r\n      .catch((error) => dispatch(burgerOrderFail(error)));\r\n  };\r\n};\r\n\r\nexport const OrdersFetchedSuccess = (orders) => {\r\n  return {\r\n    type: actionsTypes.ORDERS_FETCH_SUCCESS,\r\n    orders: orders,\r\n  };\r\n};\r\nexport const OrdersFetchedFail = (error) => {\r\n  return {\r\n    type: actionsTypes.ORDERS_FETCH_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const ordersFetchStart = () => {\r\n  return {\r\n    type: actionsTypes.ORDERS_FETCH_START,\r\n  };\r\n};\r\n\r\nexport const fetchedOrders = (token, userId) => {\r\n  return (dispatch) => {\r\n    dispatch(ordersFetchStart());\r\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\r\n    axios.get( '/orders.json' + queryParams)\r\n      .then((response) => {\r\n        const fetchedOrders = [];\r\n        for (let key in response.data) {\r\n          fetchedOrders.push({\r\n            ...response.data[key],\r\n            id: key,\r\n          });\r\n        }\r\n        dispatch(OrdersFetchedSuccess(fetchedOrders));\r\n      })\r\n      .catch((error) => dispatch(OrdersFetchedFail(error)));\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}