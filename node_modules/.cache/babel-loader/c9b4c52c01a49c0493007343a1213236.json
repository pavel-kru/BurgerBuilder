{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\projects\\\\BurgerBuilder\\\\BurgerBuilder\\\\src\\\\containers\\\\Orders\\\\Orders.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Order from \"../../components/Order/Order\";\nimport axios from \"../../axios-orders\";\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../store/actions/order\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders(this.props.token, this.props.userId); //   axios\n    //     .get(\"/orders.json\")\n    //     .then((res) => {\n    //       // console.log(res.data);\n    //       const fetchedOrders = [];\n    //       for (let key in res.data) {\n    //         fetchedOrders.push({\n    //           ...res.data[key],\n    //           id: key,\n    //         });\n    //       }\n    //       this.setState({ loading: false, orders: fetchedOrders });\n    //     })\n    //     .catch((er) => {\n    //       this.setState({ loading: false });\n    //     });\n  }\n\n  render() {\n    let orders = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 18\n    }, this);\n\n    if (!this.props.loading) {\n      orders = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"100px\"\n        },\n        children: this.props.orders.map(order => /*#__PURE__*/_jsxDEV(Order, {\n          ingredients: order.ingredients,\n          price: +order.price\n        }, order.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this);\n    }\n\n    return orders;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchedOrders(token, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["C:/Users/User/projects/BurgerBuilder/BurgerBuilder/src/containers/Orders/Orders.js"],"names":["React","Component","connect","Order","axios","withErrorHandler","actions","Spinner","Orders","componentDidMount","props","onFetchOrders","token","userId","render","orders","loading","marginTop","map","order","ingredients","price","id","mapStateToProps","state","auth","mapDispatchToProps","dispatch","fetchedOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;;AAEA,MAAMC,MAAN,SAAqBP,SAArB,CAA+B;AAC5BQ,EAAAA,iBAAiB,GAAG;AACnB,SAAKC,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWE,KAApC,EAA2C,KAAKF,KAAL,CAAWG,MAAtD,EADmB,CAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIC,MAAM,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAb;;AACA,QAAI,CAAC,KAAKL,KAAL,CAAWM,OAAhB,EAAyB;AACvBD,MAAAA,MAAM,gBACJ;AAAK,QAAA,KAAK,EAAE;AAAEE,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA,kBACG,KAAKP,KAAL,CAAWK,MAAX,CAAkBG,GAAlB,CAAuBC,KAAD,iBACrB,QAAC,KAAD;AAEE,UAAA,WAAW,EAAEA,KAAK,CAACC,WAFrB;AAGE,UAAA,KAAK,EAAE,CAACD,KAAK,CAACE;AAHhB,WACOF,KAAK,CAACG,EADb;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADF;AAWD;;AAED,WAAOP,MAAP;AACD;;AAtC4B;;AAyC/B,MAAMQ,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLT,IAAAA,MAAM,EAAES,KAAK,CAACL,KAAN,CAAYJ,MADf;AAELC,IAAAA,OAAO,EAAEQ,KAAK,CAACL,KAAN,CAAYH,OAFhB;AAGLJ,IAAAA,KAAK,EAAEY,KAAK,CAACC,IAAN,CAAWb,KAHb;AAILC,IAAAA,MAAM,EAAEW,KAAK,CAACC,IAAN,CAAWZ;AAJd,GAAP;AAMD,CAPD;;AASA,MAAMa,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLhB,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBc,QAAQ,CAACrB,OAAO,CAACsB,aAAR,CAAsBhB,KAAtB,EAA6BC,MAA7B,CAAD;AADrC,GAAP;AAGD,CAJD;;AAMA,eAAeX,OAAO,CACpBqB,eADoB,EAEpBG,kBAFoB,CAAP,CAGbrB,gBAAgB,CAACG,MAAD,EAASJ,KAAT,CAHH,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Order from \"../../components/Order/Order\";\r\nimport axios from \"../../axios-orders\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../store/actions/order\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\n\r\nclass Orders extends Component {\r\n   componentDidMount() {\r\n    this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    //   axios\r\n    //     .get(\"/orders.json\")\r\n    //     .then((res) => {\r\n    //       // console.log(res.data);\r\n    //       const fetchedOrders = [];\r\n    //       for (let key in res.data) {\r\n    //         fetchedOrders.push({\r\n    //           ...res.data[key],\r\n    //           id: key,\r\n    //         });\r\n    //       }\r\n    //       this.setState({ loading: false, orders: fetchedOrders });\r\n    //     })\r\n    //     .catch((er) => {\r\n    //       this.setState({ loading: false });\r\n    //     });\r\n  }\r\n\r\n  render() {\r\n    let orders = <Spinner />;\r\n    if (!this.props.loading) {\r\n      orders = (\r\n        <div style={{ marginTop: \"100px\" }}>\r\n          {this.props.orders.map((order) => (\r\n            <Order\r\n              key={order.id}\r\n              ingredients={order.ingredients}\r\n              price={+order.price}\r\n            />\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return orders;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchOrders: (token, userId) => dispatch(actions.fetchedOrders(token, userId)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(Orders, axios));\r\n"]},"metadata":{},"sourceType":"module"}