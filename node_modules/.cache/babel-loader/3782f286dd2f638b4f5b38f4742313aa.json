{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\projects\\\\BurgerBuilder\\\\BurgerBuilder\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../../components/UI/Input/Input\";\nimport { Button } from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport classes from \"./Auth.module.scss\";\nimport * as actions from \"../../store/actions/auth\";\nimport { updateState, checkValidity } from \"../../shared/utility\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(props) {}\n\n  render() {\n    const formElements = [];\n\n    for (let key in this.state.authForm) {\n      formElements.push({\n        id: key,\n        config: this.state.authForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 16\n    }, this);\n\n    if (!this.props.loading) {\n      form = formElements.map(el => /*#__PURE__*/_jsxDEV(Input, {\n        elementConfig: el.config.elementConfig,\n        elementType: el.config.elementType,\n        value: el.config.value,\n        changed: event => this.changeFormValueHandler(event, el.id),\n        invalid: el.config.validation && !el.config.valid && el.config.touched\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this));\n    }\n\n    let errorMessage = this.props.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: this.props.error.message.split(\"_\").join(\" \") + \"!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this) : null;\n    let redirect = null;\n\n    if (this.props.isAuth && this.props.ingr) {\n      let ingredientsTouched = Object.values(this.props.ingr).reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n      redirect = ingredientsTouched > 0 ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/checkout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [redirect, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.formOnSubmit,\n        className: classes.LoginData,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please, login.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), errorMessage, form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          clicked: this.signinSignupHandler,\n          btnType: \"Danger\",\n          children: [\"SWITCH TO \", !this.state.isSignUp ? \"SIGNIN\" : \"SIGNUP\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    ingr: state.burgerBuilder.ingredients,\n    isAuth: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:/Users/User/projects/BurgerBuilder/BurgerBuilder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","Spinner","classes","actions","updateState","checkValidity","Auth","constructor","props","render","formElements","key","state","authForm","push","id","config","form","loading","map","el","elementConfig","elementType","value","event","changeFormValueHandler","validation","valid","touched","errorMessage","error","color","message","split","join","redirect","isAuth","ingr","ingredientsTouched","Object","values","reduce","sum","formOnSubmit","LoginData","signinSignupHandler","isSignUp","mapStateToProps","auth","burgerBuilder","ingredients","token","mapDispatchToProps","dispatch","onAuth","email","password"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport { Button } from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.module.scss\";\r\nimport * as actions from \"../../store/actions/auth\";\r\nimport { updateState, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  constructor(props) {\r\n    \r\n  }\r\n  state = {\r\n    authForm: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"E-mail\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, isMail: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, minLength: 6 },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignUp: true,\r\n  };\r\n\r\n  changeFormValueHandler = (event, contorolName) => {\r\n    const updatedAuthForm = updateState(this.state.authForm, {\r\n      [contorolName]: updateState(this.state.authForm[contorolName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.authForm[contorolName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n\r\n    this.setState({ authForm: updatedAuthForm });\r\n  };\r\n\r\n  formOnSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.authForm.email.value,\r\n      this.state.authForm.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  signinSignupHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState((prevState) => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElements = [];\r\n    for (let key in this.state.authForm) {\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.authForm[key],\r\n      });\r\n    }\r\n    let form = <Spinner />;\r\n    if (!this.props.loading) {\r\n      form = formElements.map((el) => (\r\n        <Input\r\n          key={el.id}\r\n          elementConfig={el.config.elementConfig}\r\n          elementType={el.config.elementType}\r\n          value={el.config.value}\r\n          changed={(event) => this.changeFormValueHandler(event, el.id)}\r\n          invalid={\r\n            el.config.validation && !el.config.valid && el.config.touched\r\n          }\r\n        />\r\n      ));\r\n    }\r\n    let errorMessage = this.props.error ? (\r\n      <p style={{ color: \"red\" }}>\r\n        {this.props.error.message.split(\"_\").join(\" \") + \"!\"}\r\n      </p>\r\n    ) : null;\r\n\r\n    let redirect = null;\r\n    if (this.props.isAuth && this.props.ingr) {\r\n      let ingredientsTouched = Object.values(this.props.ingr).reduce(\r\n        (sum, el) => {\r\n          return sum + el;\r\n        },\r\n        0\r\n      );\r\n      redirect =\r\n        ingredientsTouched > 0 ? (\r\n          <Redirect to=\"/checkout\" />\r\n        ) : (\r\n          <Redirect to=\"/\" />\r\n        );\r\n    }\r\n    return (\r\n      <>\r\n        {redirect}\r\n        <form onSubmit={this.formOnSubmit} className={classes.LoginData}>\r\n          <p>Please, login.</p>\r\n          {errorMessage}\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n          <Button clicked={this.signinSignupHandler} btnType=\"Danger\">\r\n            SWITCH TO {!this.state.isSignUp ? \"SIGNIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    ingr: state.burgerBuilder.ingredients,\r\n    isAuth: state.auth.token !== null,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"]},"metadata":{},"sourceType":"module"}