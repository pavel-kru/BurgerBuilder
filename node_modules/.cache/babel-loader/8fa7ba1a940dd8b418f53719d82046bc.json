{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\projects\\\\BurgerBuilder\\\\BurgerBuilder\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport styles from \"./ContactData.module.scss\";\nimport { Button } from \"../../../components/UI/Button/Button\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport * as actions from \"../../../store/actions/order\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport { updateState, checkValidity } from \"../../../shared/utility\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        phone: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"tel\",\n            placeholder: \"Your Phone Number\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isTel: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your E-mail\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isMail: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Street\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        house: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your House\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayName: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayName: \"Cheapest\"\n            }]\n          },\n          value: \"fastest\",\n          valid: true,\n          validation: {}\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let inputIdx in this.state.orderForm) {\n        formData[inputIdx] = this.state.orderForm[inputIdx].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingr,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order, this.props.token);\n    };\n  }\n\n  changeFormValueHandler(event, idx) {\n    const updatedFormElement = updateState(this.state.orderForm[idx], {\n      value: event.target.value,\n      touched: true,\n      valid: checkValidity(event.target.value, this.state.orderForm[idx].validation)\n    });\n    const updatedOrderForm = updateState(this.state.orderForm, {\n      [idx]: updatedFormElement\n    });\n    let formIsValid = true;\n\n    for (let inputIdx in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdx].valid && formIsValid;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    const formElements = [];\n\n    for (let key in this.state.orderForm) {\n      formElements.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.ContactData,\n      onSubmit: this.orderHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your contact data, please.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), formElements.map(el => /*#__PURE__*/_jsxDEV(Input, {\n        elementConfig: el.config.elementConfig,\n        elementType: el.config.elementType,\n        value: el.config.value,\n        changed: event => this.changeFormValueHandler(event, el.id),\n        invalid: el.config.validation && !el.config.valid && el.config.touched\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid // clicked={this.props.onOrderConfirm}\n        ,\n        children: \"CONFIRM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 14\n      }, this);\n    }\n\n    const orderRedirect = this.props.confirmed ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 50\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [orderRedirect, form]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingr: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.price,\n    loading: state.order.loading,\n    confirmed: state.order.orderConfirmed,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.burgerOrder(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["C:/Users/User/projects/BurgerBuilder/BurgerBuilder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Redirect","styles","Button","axios","Spinner","Input","actions","withErrorHandler","updateState","checkValidity","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","phone","isTel","email","isMail","street","house","deliveryMethod","options","displayName","formIsValid","orderHandler","event","preventDefault","formData","inputIdx","order","ingredients","props","ingr","price","orderData","userId","onOrderBurger","token","changeFormValueHandler","idx","updatedFormElement","target","updatedOrderForm","setState","render","formElements","key","push","id","config","form","map","el","loading","orderRedirect","confirmed","mapStateToProps","burgerBuilder","orderConfirmed","auth","mapDispatchToProps","dispatch","burgerOrder"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport styles from \"./ContactData.module.scss\";\r\nimport { Button } from \"../../../components/UI/Button/Button\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport * as actions from \"../../../store/actions/order\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport { updateState, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  \r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      phone: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"tel\",\r\n          placeholder: \"Your Phone Number\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, isTel: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-mail\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, isMail: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Street\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      house: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your House\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayName: \"Fastest\" },\r\n            { value: \"cheapest\", displayName: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        valid: true,\r\n        validation: {},\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  changeFormValueHandler(event, idx) {\r\n    const updatedFormElement = updateState(this.state.orderForm[idx], {\r\n      value: event.target.value,\r\n      touched: true,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        this.state.orderForm[idx].validation\r\n      ),\r\n    });\r\n    const updatedOrderForm = updateState(this.state.orderForm, {\r\n      [idx]: updatedFormElement,\r\n    });\r\n    let formIsValid = true;\r\n\r\n    for (let inputIdx in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdx].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  }\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let inputIdx in this.state.orderForm) {\r\n      formData[inputIdx] = this.state.orderForm[inputIdx].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ingr,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  render() {\r\n    const formElements = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form className={styles.ContactData} onSubmit={this.orderHandler}>\r\n        <h4>Enter your contact data, please.</h4>\r\n        {formElements.map((el) => (\r\n          <Input\r\n            key={el.id}\r\n            elementConfig={el.config.elementConfig}\r\n            elementType={el.config.elementType}\r\n            value={el.config.value}\r\n            changed={(event) => this.changeFormValueHandler(event, el.id)}\r\n            invalid={\r\n              el.config.validation && !el.config.valid && el.config.touched\r\n            }\r\n          />\r\n        ))}\r\n        <Button\r\n          btnType=\"Success\"\r\n          disabled={!this.state.formIsValid}\r\n          // clicked={this.props.onOrderConfirm}\r\n        >\r\n          CONFIRM\r\n        </Button>\r\n      </form>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    const orderRedirect = this.props.confirmed ? <Redirect to=\"/\" /> : null;\r\n\r\n    return (\r\n      <>\r\n        {orderRedirect}\r\n        {form}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingr: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.price,\r\n    loading: state.order.loading,\r\n    confirmed: state.order.orderConfirmed,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.burgerOrder(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n"]},"metadata":{},"sourceType":"module"}