{"ast":null,"code":"import * as actionsTypes from \"./actionsTypes\";\nimport axios from \"axios\";\nexport const authStart = () => {\n  return {\n    type: actionsTypes.AUTH_START\n  };\n};\nexport const authSuccess = (userId, token) => {\n  return {\n    type: actionsTypes.AUTH_SUCCESS,\n    userId: userId,\n    idToken: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionsTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  return {\n    type: actionsTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationDate => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationDate * 1000);\n  };\n};\nexport const auth = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBlGFZ3Hke0OHMJgdrlfYabcIExiHCtxxQ\";\n\n    if (isSignUp) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBlGFZ3Hke0OHMJgdrlfYabcIExiHCtxxQ\";\n    }\n\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", response.data.idToken);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", response.data.localId);\n      dispatch(authSuccess(response.data.localId, response.data.idToken));\n      dispatch(checkAuthTimeout(response.data.expiresIn));\n    }).catch(error => {\n      var _error$response;\n\n      dispatch(authFail((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.error));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem(\"userId\");\n        dispatch(authSuccess(userId, token));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/User/projects/BurgerBuilder/BurgerBuilder/src/store/actions/auth.js"],"names":["actionsTypes","axios","authStart","type","AUTH_START","authSuccess","userId","token","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationDate","dispatch","setTimeout","auth","email","password","isSignUp","authData","returnSecureToken","url","post","then","response","console","log","Date","getTime","data","expiresIn","setItem","localId","catch","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionsTypes from \"./actionsTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const authStart = () => {\r\n  return {\r\n    type: actionsTypes.AUTH_START,\r\n  };\r\n};\r\n\r\nexport const authSuccess = (userId, token) => {\r\n  return {\r\n    type: actionsTypes.AUTH_SUCCESS,\r\n    userId: userId,\r\n    idToken: token,\r\n  };\r\n};\r\n\r\nexport const authFail = (error) => {\r\n  return {\r\n    type: actionsTypes.AUTH_FAIL,\r\n    error: error,\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"token\");\r\n  localStorage.removeItem(\"expirationDate\");\r\n  localStorage.removeItem(\"userId\");\r\n  return {\r\n    type: actionsTypes.AUTH_LOGOUT,\r\n  };\r\n};\r\n\r\nexport const checkAuthTimeout = (expirationDate) => {\r\n  return (dispatch) => {\r\n    setTimeout(() => {\r\n      dispatch(logout());\r\n    }, expirationDate * 1000);\r\n  };\r\n};\r\n\r\nexport const auth = (email, password, isSignUp) => {\r\n  return (dispatch) => {\r\n    dispatch(authStart());\r\n    const authData = {\r\n      email: email,\r\n      password: password,\r\n      returnSecureToken: true,\r\n    };\r\n    let url =\r\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBlGFZ3Hke0OHMJgdrlfYabcIExiHCtxxQ\";\r\n    if (isSignUp) {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBlGFZ3Hke0OHMJgdrlfYabcIExiHCtxxQ\";\r\n    }\r\n    axios\r\n      .post(url, authData)\r\n      .then((response) => {\r\n        console.log(response);\r\n        const expirationDate = new Date(\r\n          new Date().getTime() + response.data.expiresIn * 1000\r\n        );\r\n        localStorage.setItem(\"token\", response.data.idToken);\r\n        localStorage.setItem(\"expirationDate\", expirationDate);\r\n        localStorage.setItem(\"userId\", response.data.localId);\r\n        dispatch(authSuccess(response.data.localId, response.data.idToken));\r\n        dispatch(checkAuthTimeout(response.data.expiresIn));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(authFail(error.response?.data.error));\r\n      });\r\n  };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n  return (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      dispatch(logout());\r\n    } else {\r\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\r\n      if (expirationDate <= new Date()) {\r\n        dispatch(logout());\r\n      } else {\r\n        const userId = localStorage.getItem(\"userId\");\r\n        dispatch(authSuccess(userId, token));\r\n          dispatch(\r\n          checkAuthTimeout(\r\n            (expirationDate.getTime() - new Date().getTime()) / 1000)\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}