{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\projects\\\\BurgerBuilder\\\\BurgerBuilder\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../../components/UI/Input/Input\";\nimport { Button } from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport classes from \"./Auth.module.scss\";\nimport * as actions from \"../../store/actions/auth\";\nimport { updateState, checkValidity } from \"../../shared/utility\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      authForm: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"E-mail\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isMail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignUp: true\n    };\n\n    this.changeFormValueHandler = (event, contorolName) => {\n      const updatedAuthForm = updateState(this.state.authForm, {\n        [contorolName]: updateState(this.state.authForm[contorolName], {\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.authForm[contorolName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        authForm: updatedAuthForm\n      });\n    };\n\n    this.formOnSubmit = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.authForm.email.value, this.state.authForm.password.value, this.state.isSignUp);\n    };\n\n    this.signinSignupHandler = event => {\n      event.preventDefault();\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n  }\n\n  render() {\n    const formElements = [];\n\n    for (let key in this.state.authForm) {\n      formElements.push({\n        id: key,\n        config: this.state.authForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this);\n\n    if (!this.props.loading) {\n      form = formElements.map(el => /*#__PURE__*/_jsxDEV(Input, {\n        elementConfig: el.config.elementConfig,\n        elementType: el.config.elementType,\n        value: el.config.value,\n        changed: event => this.changeFormValueHandler(event, el.id),\n        invalid: el.config.validation && !el.config.valid && el.config.touched\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this));\n    }\n\n    let errorMessage = this.props.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: this.props.error.message.split(\"_\").join(\" \") + \"!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this) : null;\n    let redirect = null;\n\n    if (this.props.isAuth && this.props.ingr) {\n      let ingredientsTouched = Object.values(this.props.ingr).reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n      redirect = ingredientsTouched > 0 ? /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/checkout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [redirect, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.formOnSubmit,\n        className: classes.LoginData,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please, login.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), errorMessage, form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          clicked: this.signinSignupHandler,\n          btnType: \"Danger\",\n          children: [\"SWITCH TO \", !this.state.isSignUp ? \"SIGNIN\" : \"SIGNUP\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    ingr: state.burgerBuilder.ingredients,\n    isAuth: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:/Users/User/projects/BurgerBuilder/BurgerBuilder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","Spinner","classes","actions","updateState","checkValidity","Auth","state","authForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isMail","valid","touched","password","minLength","isSignUp","changeFormValueHandler","event","contorolName","updatedAuthForm","target","setState","formOnSubmit","preventDefault","props","onAuth","signinSignupHandler","prevState","render","formElements","key","push","id","config","form","loading","map","el","errorMessage","error","color","message","split","join","redirect","isAuth","ingr","ingredientsTouched","Object","values","reduce","sum","LoginData","mapStateToProps","auth","burgerBuilder","ingredients","token","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport { Button } from \"../../components/UI/Button/Button\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./Auth.module.scss\";\r\nimport * as actions from \"../../store/actions/auth\";\r\nimport { updateState, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    authForm: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"E-mail\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, isMail: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, minLength: 6 },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignUp: true,\r\n  };\r\n\r\n  changeFormValueHandler = (event, contorolName) => {\r\n    const updatedAuthForm = updateState(this.state.authForm, {\r\n      [contorolName]: updateState(this.state.authForm[contorolName], {\r\n        value: event.target.value,\r\n        valid: this.checkValidity(\r\n          event.target.value,\r\n          this.state.authForm[contorolName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n\r\n    this.setState({ authForm: updatedAuthForm });\r\n  };\r\n\r\n  formOnSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.authForm.email.value,\r\n      this.state.authForm.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  signinSignupHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState((prevState) => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElements = [];\r\n    for (let key in this.state.authForm) {\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.authForm[key],\r\n      });\r\n    }\r\n    let form = <Spinner />;\r\n    if (!this.props.loading) {\r\n      form = formElements.map((el) => (\r\n        <Input\r\n          key={el.id}\r\n          elementConfig={el.config.elementConfig}\r\n          elementType={el.config.elementType}\r\n          value={el.config.value}\r\n          changed={(event) => this.changeFormValueHandler(event, el.id)}\r\n          invalid={\r\n            el.config.validation && !el.config.valid && el.config.touched\r\n          }\r\n        />\r\n      ));\r\n    }\r\n    let errorMessage = this.props.error ? (\r\n      <p style={{ color: \"red\" }}>\r\n        {this.props.error.message.split(\"_\").join(\" \") + \"!\"}\r\n      </p>\r\n    ) : null;\r\n\r\n    let redirect = null;\r\n    if (this.props.isAuth && this.props.ingr) {\r\n      let ingredientsTouched = Object.values(this.props.ingr).reduce(\r\n        (sum, el) => {\r\n          return sum + el;\r\n        },\r\n        0\r\n      );\r\n      redirect =\r\n        ingredientsTouched > 0 ? (\r\n          <Redirect to=\"/checkout\" />\r\n        ) : (\r\n          <Redirect to=\"/\" />\r\n        );\r\n    }\r\n    return (\r\n      <>\r\n        {redirect}\r\n        <form onSubmit={this.formOnSubmit} className={classes.LoginData}>\r\n          <p>Please, login.</p>\r\n          {errorMessage}\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n          <Button clicked={this.signinSignupHandler} btnType=\"Danger\">\r\n            SWITCH TO {!this.state.isSignUp ? \"SIGNIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    ingr: state.burgerBuilder.ingredients,\r\n    isAuth: state.auth.token !== null,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"]},"metadata":{},"sourceType":"module"}