{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\projects\\\\BurgerBuilder\\\\BurgerBuilder\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport styles from \"./ContactData.module.scss\";\nimport { Button } from \"../../../components/UI/Button/Button\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport * as actions from \"../../../store/actions/order\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport { updateState, checkValidity } from \"../../../shared/utility\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ContactData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let inputIdx in this.state.orderForm) {\n        formData[inputIdx] = this.state.orderForm[inputIdx].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingr,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order, this.props.token);\n    };\n\n    this.state = {};\n  }\n\n  changeFormValueHandler(event, idx) {\n    const updatedFormElement = updateState(this.state.orderForm[idx], {\n      value: event.target.value,\n      touched: true,\n      valid: checkValidity(event.target.value, this.state.orderForm[idx].validation)\n    });\n    const updatedOrderForm = updateState(this.state.orderForm, {\n      [idx]: updatedFormElement\n    });\n    let formIsValid = true;\n\n    for (let inputIdx in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdx].valid && formIsValid;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    const formElements = [];\n\n    for (let key in this.state.orderForm) {\n      formElements.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.ContactData,\n      onSubmit: this.orderHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your contact data, please.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), formElements.map(el => /*#__PURE__*/_jsxDEV(Input, {\n        elementConfig: el.config.elementConfig,\n        elementType: el.config.elementType,\n        value: el.config.value,\n        changed: event => this.changeFormValueHandler(event, el.id),\n        invalid: el.config.validation && !el.config.valid && el.config.touched\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid // clicked={this.props.onOrderConfirm}\n        ,\n        children: \"CONFIRM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 14\n      }, this);\n    }\n\n    const orderRedirect = this.props.confirmed ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 50\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [orderRedirect, form]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingr: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.price,\n    loading: state.order.loading,\n    confirmed: state.order.orderConfirmed,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.burgerOrder(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["C:/Users/User/projects/BurgerBuilder/BurgerBuilder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Redirect","styles","Button","axios","Spinner","Input","actions","withErrorHandler","updateState","checkValidity","ContactData","constructor","props","state","orderHandler","event","preventDefault","formData","inputIdx","orderForm","value","order","ingredients","ingr","price","orderData","userId","onOrderBurger","token","changeFormValueHandler","idx","updatedFormElement","target","touched","valid","validation","updatedOrderForm","formIsValid","setState","render","formElements","key","push","id","config","form","map","el","elementConfig","elementType","loading","orderRedirect","confirmed","mapStateToProps","burgerBuilder","orderConfirmed","auth","mapDispatchToProps","dispatch","burgerOrder"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport styles from \"./ContactData.module.scss\";\r\nimport { Button } from \"../../../components/UI/Button/Button\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport * as actions from \"../../../store/actions/order\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport { updateState, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    }\r\n  }\r\n  state = {\r\n    \r\n  };\r\n\r\n  changeFormValueHandler(event, idx) {\r\n    const updatedFormElement = updateState(this.state.orderForm[idx], {\r\n      value: event.target.value,\r\n      touched: true,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        this.state.orderForm[idx].validation\r\n      ),\r\n    });\r\n    const updatedOrderForm = updateState(this.state.orderForm, {\r\n      [idx]: updatedFormElement,\r\n    });\r\n    let formIsValid = true;\r\n\r\n    for (let inputIdx in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdx].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  }\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let inputIdx in this.state.orderForm) {\r\n      formData[inputIdx] = this.state.orderForm[inputIdx].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ingr,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  render() {\r\n    const formElements = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form className={styles.ContactData} onSubmit={this.orderHandler}>\r\n        <h4>Enter your contact data, please.</h4>\r\n        {formElements.map((el) => (\r\n          <Input\r\n            key={el.id}\r\n            elementConfig={el.config.elementConfig}\r\n            elementType={el.config.elementType}\r\n            value={el.config.value}\r\n            changed={(event) => this.changeFormValueHandler(event, el.id)}\r\n            invalid={\r\n              el.config.validation && !el.config.valid && el.config.touched\r\n            }\r\n          />\r\n        ))}\r\n        <Button\r\n          btnType=\"Success\"\r\n          disabled={!this.state.formIsValid}\r\n          // clicked={this.props.onOrderConfirm}\r\n        >\r\n          CONFIRM\r\n        </Button>\r\n      </form>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    const orderRedirect = this.props.confirmed ? <Redirect to=\"/\" /> : null;\r\n\r\n    return (\r\n      <>\r\n        {orderRedirect}\r\n        {form}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingr: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.price,\r\n    loading: state.order.loading,\r\n    confirmed: state.order.orderConfirmed,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.burgerOrder(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n"]},"metadata":{},"sourceType":"module"}